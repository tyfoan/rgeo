# frozen_string_literal: true

# -----------------------------------------------------------------------------
#
# Tests for the GEOS multi line string implementation
#
# -----------------------------------------------------------------------------

require "test_helper"

class GeosMultiLineStringTest < Minitest::Test # :nodoc:
  include RGeo::Tests::Common::MultiLineStringTests

  def create_factory
    @factory = RGeo::Geos.factory
  end

  def test_polygonize_two_rings
    polygon1_wkt = "POLYGON ((30.001043463959554 49.011562641544636, 30.00104344258436 49.01156262042366,
      30.000986002945037 49.01153728085321, 30.00098241341133 49.011536807005264,
      30.0009793658682 49.01153814158362, 30.000978645524963 49.011540502810455,
      30.00098067434918 49.01154250751114, 30.001038084302778 49.01156783398706,
      30.001038084303158 49.011567833987236, 30.001043463959558 49.011562641544636,
      30.001043463959554 49.011562641544636))"

    polygon2_wkt = "POLYGON ((30.001038084303158 49.011567833987236, 30.0011508215092 49.01161919123365,
      30.00115085765015 49.01161920753694, 30.001182110397195 49.01163316771786,
      30.001185695713303 49.01163365520981, 30.001188754941474 49.01163233224407,
      30.001189496027187 49.01162997379613, 30.00118748485277 49.011627961412835,
      30.001156250234796 49.011614009330685, 30.001043501660316 49.011562646908196,
      30.001043463959558 49.011562641544636, 30.001038084303158 49.011567833987236))"

    expected_result = @factory.parse_wkt("GEOMETRYCOLLECTION(#{polygon1_wkt}, #{polygon2_wkt})")

    multi_line_string = @factory.parse_wkt("MULTILINESTRING (
      (30.001043463959554 49.011562641544636, 30.00104344258436 49.01156262042366, 30.000986002945037 49.01153728085321,
      30.00098241341133 49.011536807005264, 30.0009793658682 49.01153814158362, 30.000978645524963 49.011540502810455,
      30.00098067434918 49.01154250751114, 30.001038084302778 49.01156783398706, 30.001038084303158 49.011567833987236),
      (30.001038084303158 49.011567833987236, 30.0011508215092 49.01161919123365, 30.00115085765015 49.01161920753694,
      30.001182110397195 49.01163316771786, 30.001185695713303 49.01163365520981, 30.001188754941474 49.01163233224407,
      30.001189496027187 49.01162997379613, 30.00118748485277 49.011627961412835, 30.001156250234796 49.011614009330685,
      30.001043501660316 49.011562646908196, 30.001043463959558 49.011562641544636), (30.001043463959558 49.011562641544636,
      30.001043463959554 49.011562641544636), (30.001062329555715 49.01154443246662, 30.001043463959558 49.011562641544636),
      (30.001043463959558 49.011562641544636, 30.001038084303158 49.011567833987236),
      (30.001038084303158 49.011567833987236, 30.00101922700232 49.01158603503694)
    )")


    line_string_polygonized = multi_line_string.polygonize
    assert_equal expected_result, line_string_polygonized
  end
end if RGeo::Geos.capi_supported?
